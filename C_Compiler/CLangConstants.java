/* Generated By:JJTree&JavaCC: Do not edit this line. CLangConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CLangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int TYPE = 7;
  /** RegularExpression Id. */
  int WHILE = 8;
  /** RegularExpression Id. */
  int FOR = 9;
  /** RegularExpression Id. */
  int IF = 10;
  /** RegularExpression Id. */
  int INT = 11;
  /** RegularExpression Id. */
  int CHAR = 12;
  /** RegularExpression Id. */
  int VOID = 13;
  /** RegularExpression Id. */
  int ID = 14;
  /** RegularExpression Id. */
  int NUMBER = 15;
  /** RegularExpression Id. */
  int CHAR_VALUE = 16;
  /** RegularExpression Id. */
  int LETTER = 17;
  /** RegularExpression Id. */
  int DIGIT = 18;
  /** RegularExpression Id. */
  int ZERO = 19;
  /** RegularExpression Id. */
  int LRBRACKET = 20;
  /** RegularExpression Id. */
  int RRBRACKET = 21;
  /** RegularExpression Id. */
  int COMMA = 22;
  /** RegularExpression Id. */
  int LCBRACKET = 23;
  /** RegularExpression Id. */
  int RCBRACKET = 24;
  /** RegularExpression Id. */
  int SEMICOLON = 25;
  /** RegularExpression Id. */
  int ASSIGN = 26;
  /** RegularExpression Id. */
  int APSOTREPHE = 27;
  /** RegularExpression Id. */
  int EQ = 28;
  /** RegularExpression Id. */
  int LT = 29;
  /** RegularExpression Id. */
  int LTE = 30;
  /** RegularExpression Id. */
  int GT = 31;
  /** RegularExpression Id. */
  int GTE = 32;
  /** RegularExpression Id. */
  int NOT = 33;
  /** RegularExpression Id. */
  int NEQ = 34;
  /** RegularExpression Id. */
  int AND = 35;
  /** RegularExpression Id. */
  int OR = 36;
  /** RegularExpression Id. */
  int ADD = 37;
  /** RegularExpression Id. */
  int SUB = 38;
  /** RegularExpression Id. */
  int MUL = 39;
  /** RegularExpression Id. */
  int DIV = 40;
  /** RegularExpression Id. */
  int MOD = 41;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<TYPE>",
    "\"while\"",
    "\"for\"",
    "\"if\"",
    "\"int\"",
    "\"char\"",
    "\"void\"",
    "<ID>",
    "<NUMBER>",
    "<CHAR_VALUE>",
    "<LETTER>",
    "<DIGIT>",
    "\"0\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\";\"",
    "\"=\"",
    "\"\\\'\"",
    "\"==\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"!\"",
    "\"!=\"",
    "\"&&\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
  };

}
